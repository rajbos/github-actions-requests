on:
  push:

  workflow_dispatch:
  
jobs:
  # temp job to have the same inputs in the second job
  find-action-name:
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.get-action.outputs.action }}
      owner: ${{ steps.get-action.outputs.owner }}
      name: ${{ steps.get-action.outputs.name }}
      request_owner: ${{ steps.get-action.outputs.request_owner }}
      request_repo: ${{ steps.get-action.outputs.request_repo }}
      #request_issue: ${{ steps.get-action.outputs.request_issue }}
    steps:
    - uses: actions/github-script@v5
      name: Find action from comment
      id: get-action
      with:
        result-encoding: string
        script: |
            const action="calibreapp/image-actions"
            const actionOwner="calibreapp"
            const actionName="image-actions"
            let owner="rajbos-actions-test"
            let repo="image-actions"

            // this private repo has 1 code scanning alerts
            owner="Microsoft-Bootcamp"
            repo="demo-rob"

            console.log(`::set-output name=action::${action}`)
            console.log(`::set-output name=owner::${actionOwner}`)
            console.log(`::set-output name=name::${actionName}`)
      
            console.log(`::set-output name=request_owner::${owner}`)            
            console.log(`::set-output name=request_repo::${repo}`)
            // console.log(`::set-output name=request_issue::${issue_number}`)


  codeql-results:
    runs-on: ubuntu-latest
    needs: find-action-name
    steps:
    - uses: actions/github-script@v5
      name: Get resuls from CodeQL scan
      id: get-codeql-results
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          // note: owner is now the organization the FORK lives in:
          const owner = "${{ needs.find-action-name.outputs.request_owner }}"
          const repo = "${{ needs.find-action-name.outputs.request_repo }}"

          console.log(`Found owner [${owner}] and repo [${repo}] to check the code scanning alerts for`)

          const recentScansData = await github.rest.codeScanning.listRecentAnalyses({
            owner,
            repo,
          })
          
          if (recentScansData === undefined) {
            console.log(`recentScansData is undefined`)
          }
          else {
            console.log('Response from code scans information:')          
            const mostRecentScan = recentScansData.data[0]
            console.log(`Found most recent scan data that was created at [${mostRecentScan.created_at}] that can be found at [${mostRecentScan.url}]. The scan had [${mostRecentScan.results_count}] results`)
          }

          // list all alerts, not just the most recent scan:
          const { data } = await github.rest.codeScanning.listAlertsForRepo({ 
              owner,
              repo
            })
            
          if (data === undefined) {
            console.log(`Alert response is undefined`)
          }
          else {
            console.log('Response from code scanning:')
            console.log(JSON.stringify(data))

            if (data.length === 0) {
              console.log(`Overall check: No code scanning alerts found for the repo`)
            }
            else {
              console.log(`Overall check: Found [${data.length}] code scanning alerts for the repo`)
              // todo: check the severity of each alert / group by severity
              for (const alert of data) {
                console.log(`Alert: ${JSON.stringify(alert)}`)
              }
            }
          }

